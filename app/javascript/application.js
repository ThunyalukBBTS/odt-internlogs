// Configure your import map in config/importmap.rb. Read more: https://github.com/rails/importmap-rails
import "@hotwired/turbo-rails"
import "controllers"

document.addEventListener("turbo:load", function () {
    const editModal = document.getElementById("editTaskModal");
    const confirmModal = document.getElementById("confirmModal");
    const form = document.getElementById("editTaskForm");

    const closeModal = document.getElementById("closeModal");
    const nextButton = document.getElementById("nextButton");
    const backButton = document.getElementById("backButton");
    const confirmSave = document.getElementById("confirmSave");

    const hoursSelect = document.getElementById("edit_hours");
    const minutesSelect = document.getElementById("edit_minutes");

    const monthFilter = document.getElementById("monthFilter");

    // ‡∏•‡∏ö Event Listener ‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
    document.querySelectorAll(".edit-task-btn").forEach((button) => {
        button.removeEventListener("click", openEditModal); // ‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏Å‡πà‡∏≤
        button.addEventListener("click", openEditModal); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
    });

    function openEditModal(event) {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å data-* attributes
        const taskId = this.dataset.id;
        const taskDate = this.dataset.date;
        const taskHours = this.dataset.hours;
        const taskMins = this.dataset.mins;
        const taskDetail = this.dataset.detail;

        // ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
        document.getElementById("edit_task_id").value = taskId;
        document.getElementById("edit_date").value = taskDate;
        document.getElementById("edit_hours").value = taskHours;
        document.getElementById("edit_minutes").value = taskMins;
        document.getElementById("edit_detail").value = taskDetail;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        validateMinutes();

        // ‡∏ï‡∏±‡πâ‡∏á URL ‡∏Ç‡∏≠‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
        form.action = `/home/${taskId}`;

        // ‡πÅ‡∏™‡∏î‡∏á Edit Modal
        editModal.classList.remove("hidden");
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á minutes ‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á hours
    function validateMinutes() {
        hoursSelect.addEventListener("change", function () {
            // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏≤‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
            minutesSelect.innerHTML = "";

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà
            const option00 = document.createElement("option");
            option00.value = "00";
            option00.textContent = "00";

            const option30 = document.createElement("option");
            option30.value = "30";
            option30.textContent = "30";

            if (hoursSelect.value === "8") {
                // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 8 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡∏•‡πá‡∏≠‡∏Ñ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 00 ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 30
                minutesSelect.appendChild(option00);
                minutesSelect.value = "00";
            } else if (hoursSelect.value === "0") {
                // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 0 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡∏•‡πá‡∏≠‡∏Ñ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 30 ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 00
                minutesSelect.appendChild(option30);
                minutesSelect.value = "30";
            } else {
                // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏±‡πâ‡∏á 00 ‡πÅ‡∏•‡∏∞ 30 ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
                minutesSelect.appendChild(option00);
                minutesSelect.appendChild(option30);
            }
        });
    }
    function formatHourText(hours) {
        return hours == 1 ? "1 Hour" : `${hours} Hours`;
    }

    function formatMinuteText(minutes) {
        return minutes == 1 ? "1 minute" : `${minutes} minutes`;
    }

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å validateMinutes ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á hours
    hoursSelect.addEventListener("change", validateMinutes);

    // ‡∏Å‡∏î "Next" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏õ Confirm Modal
    nextButton.addEventListener("click", function () {
        let selectedDate = document.getElementById("edit_date").value;
        let taskId = document.getElementById("edit_task_id").value; // ID ‡∏Ç‡∏≠‡∏á Task ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        let duplicateModal = document.getElementById("duplicateDateModal");

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥ **‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Task ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç**
        let isDuplicate = Array.from(document.querySelectorAll(".task-date")).some(td => {
            let rowTaskId = td.closest("tr").querySelector(".edit-task-btn").dataset.id; // ‡∏î‡∏∂‡∏á ID ‡∏Ç‡∏≠‡∏á Task ‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß
            // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á "DD/MM/YYYY" ‡πÄ‡∏õ‡πá‡∏ô "YYYY-MM-DD"
            let parts = td.innerText.split("/");
            let formattedDate = `${parts[2]}-${parts[1]}-${parts[0]}`; // YYYY-MM-DD
            return formattedDate === selectedDate && rowTaskId !== taskId; // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ Task ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥ ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Task ‡πÄ‡∏î‡∏¥‡∏°
        });

        if (isDuplicate) {
            duplicateModal.classList.remove("hidden"); // ‡πÅ‡∏™‡∏î‡∏á Modal ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        } else {
            let hours = parseInt(document.getElementById("edit_hours").value, 10) || 0;
            let minutes = parseInt(document.getElementById("edit_minutes").value, 10) || 0;
            let parts = selectedDate.split("-");
            let formatDate = `${parts[2]}/${parts[1]}/${parts[0]}`; // DD/MM/YYYY
            // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÑ‡∏õ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô Confirm Modal
            document.getElementById("confirm_date").innerText = formatDate;
            document.getElementById("confirm_hours").innerText = hours > 0 ? formatHourText(hours) : "";
            document.getElementById("confirm_minutes").innerText = minutes > 0 ? formatMinuteText(minutes) : "";
            document.getElementById("confirm_detail").innerText = document.getElementById("edit_detail").value;

            // ‡∏õ‡∏¥‡∏î Edit Modal ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î Confirm Modal
            editModal.classList.add("hidden");
            confirmModal.classList.remove("hidden");
        }
    });

    // ‡∏õ‡∏¥‡∏î Modal ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥
    document.getElementById("closeDuplicateModal").addEventListener("click", function () {
        document.getElementById("duplicateDateModal").classList.add("hidden");
    });



    // ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö (Back) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    backButton.addEventListener("click", function () {
        confirmModal.classList.add("hidden");
        editModal.classList.remove("hidden");
    });

    // ‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô (Confirm) -> ‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
    confirmSave.addEventListener("click", function () {
        form.submit();
    });

    // ‡∏õ‡∏¥‡∏î Modal ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
    closeModal.addEventListener("click", function () {
        editModal.classList.add("hidden");
    });

    if (monthFilter) {
        console.log("‚úÖ Dropdown detected!"); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏õ‡∏∏‡πà‡∏° dropdown ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
        monthFilter.addEventListener("change", function () {
            let selectedMonth = this.value;
            console.log("üìÖ Selected month:", selectedMonth); // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å

            let rows = document.querySelectorAll(".task-row");

            rows.forEach(row => {
                let dateText = row.querySelector(".task-date").innerText; // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö DD/MM/YYYY
                let rowMonth = parseInt(dateText.split("/")[1], 10); // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà

                if (selectedMonth === "" || rowMonth === parseInt(selectedMonth, 10)) {
                    row.style.display = "";
                } else {
                    row.style.display = "none";
                }
            });
        });
    } else {
        console.error("‚ùå Dropdown not found!"); // ‡∏ñ‡πâ‡∏≤‡∏õ‡∏∏‡πà‡∏° dropdown ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    }
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤
    validateMinutes();
});
